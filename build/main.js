!function(e,n){for(var t in n)e[t]=n[t]}(exports,function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){t(1),e.exports=t(2)},function(e,n){e.exports=require("@babel/polyfill")},function(e,n,t){"use strict";var o=console.log,r=t(3),i=t(4),u=t(5),a=r('\n  Usage\n  $ laf <input>\n\n  Input Options (only choose one)\n  1. gen, generate -> Generate required config boilerplate   \n  $ laf gen\n\n  2. f, fetch -> Download everything specified in your config file (.laf.json)\n  $ laf fetch\n\n  Flags (can be used together)\n  1. --out, -o -> Download everything to specified directory\n  $ laf --out "./my/directory"\n\n  2. --cut, -c -> Download all PNGs (ie. the "file cut") from your kit\n  $ laf --cut "PNG"\n  ',{flags:{out:{type:"string",alias:"o"},cut:{type:"string",alias:"c"}}});!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0;if("string"==typeof e[0]){var t=e[0].toLowerCase();if("gen"==t||"generate"==t)i.initInk();else if("f"==t||"fetch"==t){var r="".concat(process.cwd(),"/.laf.json");!function(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"./downloads",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"PNG",o=e.name,r=e.value,u=0,a=Object.values(r.kits);u<a.length;u++){var l=a[u],f=l.name,c=l.sections;i.init(f,{sections:c},n,t)}Object.assign({},{fileName:o})}(u.readJsonSync(r),n.out,n.cut)}}else o("Please pass a string")}(a.input,a.flags)},function(e,n){e.exports=require("meow")},function(e,n){e.exports=require("laf-lib")},function(e,n){e.exports=require("fs-extra")}]));
//# sourceMappingURL=main.js.map